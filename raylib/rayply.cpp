// Copyright (c) 2020
// Commonwealth Scientific and Industrial Research Organisation (CSIRO)
// ABN 41 687 119 230
//
// Author: Thomas Lowe
#include "rayply.h"
#include <iostream>
using namespace std;
using namespace Eigen;
using namespace ray;

// Save the polygon file to disk
void ray::writePly(const string &file_name, const vector<Vector3d> &starts, const vector<Vector3d> &ends,
                   const vector<double> &times, const vector<RGBA> &colours)
{
  cout << "saving to " << file_name << ", " << ends.size() << " rays." << endl;

  vector<RGBA> rgb(times.size());
  if (colours.size() > 0)
    rgb = colours;
  else
    colourByTime(times, rgb);

  vector<Matrix<float, 9, 1>> vertices(ends.size());  // 4d to give space for colour
  bool warned = false;
  for (size_t i = 0; i < ends.size(); i++)
  {
    if (!warned)
    {
      if (!(ends[i] == ends[i]))
      {
        cout << "WARNING: nans in point: " << i << ": " << ends[i].transpose() << endl;
        warned = true;
      }
      if (abs(ends[i][0]) > 100000.0)
      {
        cout << "WARNING: very large point location at: " << i << ": " << ends[i].transpose() << ", suspicious" << endl;
        warned = true;
      }
      bool b = starts[i] == starts[i];
      if (!b)
      {
        cout << "WARNING: nans in start: " << i << ": " << starts[i].transpose() << endl;
        warned = true;
      }
    }
    Vector3d n = starts[i] - ends[i];

    union U  // TODO: this is nasty, better to just make vertices an unsigned char vector
    {
      float f[2];
      double d;
    };
    U u;
    u.d = times[i];
    vertices[i] << (float)ends[i][0], (float)ends[i][1], (float)ends[i][2], (float)u.f[0], (float)u.f[1], (float)n[0],
      (float)n[1], (float)n[2], (float &)rgb[i];
  }
  ofstream out(file_name, ios::binary | ios::out);

  // do we put the starts in as normals?
  out << "ply" << endl;
  out << "format binary_little_endian 1.0" << endl;
  out << "comment generated by raycloudtools library" << endl;
  out << "element vertex " << vertices.size() << endl;
  out << "property float x" << endl;
  out << "property float y" << endl;
  out << "property float z" << endl;
  out << "property double time" << endl;
  out << "property float nx" << endl;
  out << "property float ny" << endl;
  out << "property float nz" << endl;
  out << "property uchar red" << endl;
  out << "property uchar green" << endl;
  out << "property uchar blue" << endl;
  out << "property uchar alpha" << endl;
  out << "end_header" << endl;

  out.write((const char *)&vertices[0], sizeof(Matrix<float, 9, 1>) * vertices.size());
}

bool ray::readPly(const string &file_name, vector<Vector3d> &starts, vector<Vector3d> &ends, vector<double> &times,
                  vector<RGBA> &colours)
{
  ifstream input(file_name.c_str());
  if (!input.is_open())
  {
    cerr << "Couldn't open file: " << file_name << endl;
    return false;
  }
  string line;
  int row_size = 0;
  int offset = -1, normal_offset = -1, time_offset = -1, colour_offset = -1;
  bool time_is_float = false;
  bool pos_is_float = false;
  bool normal_is_float = false;
  while (line != "end_header\r" && line != "end_header")
  {
    getline(input, line);
    if (line.find("property float x") != string::npos || line.find("property double x") != string::npos)
    {
      offset = row_size;
      if (line.find("float") != string::npos)
        pos_is_float = true;
    }
    if (line.find("property float nx") != string::npos || line.find("property double nx") != string::npos)
    {
      normal_offset = row_size;
      if (line.find("float") != string::npos)
        normal_is_float = true;
    }
    if (line.find("time") != string::npos)
    {
      time_offset = row_size;
      if (line.find("float") != string::npos)
        time_is_float = true;
    }
    if (line.find("property uchar red") != string::npos)
      colour_offset = row_size;
    if (line.find("float") != string::npos)
      row_size += int(sizeof(float));
    if (line.find("double") != string::npos)
      row_size += int(sizeof(double));
    if (line.find("property uchar") != string::npos)
      row_size += int(sizeof(unsigned char));
  }
  if (offset == -1)
  {
    cerr << "could not find position properties of file: " << file_name << endl;
    return false;
  }
  if (normal_offset == -1)
  {
    cerr << "could not find normal properties of file: " << file_name << endl;
    return false;
  }

  streampos start = input.tellg();
  input.seekg(0, input.end);
  size_t length = input.tellg() - start;
  input.seekg(start);
  size_t size = length / row_size;
  vector<unsigned char> vertices(length);
  // read data as a block:
  input.read((char *)&vertices[0], length);
  bool times_need_sorting = false;
  size_t num_bounded = 0;
  size_t num_unbounded = 0;
  bool warning_set = false;
  for (size_t i = 0; i < size; i++)
  {
    Vector3d end;
    if (pos_is_float)
    {
      Vector3f e = (Vector3f &)vertices[row_size * i + offset];
      end = Vector3d(e[0], e[1], e[2]);
    }
    else
      end = (Vector3d &)vertices[row_size * i + offset];
    bool end_valid = end == end;
    if (!warning_set)
    {
      if (!end_valid)
      {
        cout << "warning, NANs in point " << i << ", removing all NANs." << endl;
        warning_set = true;
      }
      if (abs(end[0]) > 100000.0)
      {
        cout << "warning: very large data in point " << i << ", suspicious: " << end.transpose() << endl;
        warning_set = true;
      }
    }
    if (!end_valid)
      continue;

    Vector3d normal;
    if (normal_is_float)
    {
      Vector3f n = (Vector3f &)vertices[row_size * i + normal_offset];
      normal = Vector3d(n[0], n[1], n[2]);
    }
    else
      normal = (Vector3d &)vertices[row_size * i + normal_offset];
    bool norm_valid = normal == normal;
    if (!warning_set)
    {
      if (!norm_valid)
      {
        cout << "warning, NANs in raystart stored in normal " << i << ", removing all such rays." << endl;
        warning_set = true;
      }
      if (abs(normal[0]) > 100000.0)
      {
        cout << "warning: very large data in normal " << i << ", suspicious: " << normal.transpose() << endl;
        warning_set = true;
      }
    }
    if (!norm_valid)
      continue;

    ends.push_back(end);
    if (time_offset != -1)
    {
      double time;
      if (time_is_float)
        time = (double)((float &)vertices[row_size * i + time_offset]);
      else
        time = (double &)vertices[row_size * i + time_offset];
      if (times.size() > 0 && times.back() > time)
        times_need_sorting = true;
      times.push_back(time);
    }
    starts.push_back(end + normal);

    if (colour_offset != -1)
    {
      RGBA colour = (RGBA &)vertices[row_size * i + colour_offset];
      colours.push_back(colour);
      if (colour.alpha > 0)
        num_bounded++;
      else
        num_unbounded++;
    }
  }
  if (times.size() == 0)
  {
    cout << "warning: no time information found in " << file_name << ", setting times at 1 second intervals per ray"
         << endl;
    times.resize(ends.size());
    for (size_t i = 0; i < times.size(); i++) times[i] = (double)i;
  }
  if (colours.size() == 0)
  {
    cout << "warning: no colour information found in " << file_name
         << ", setting colours red->green->blue based on time" << endl;
    colourByTime(times, colours);
    num_bounded = ends.size();
  }
  cout << "reading from " << file_name << ", " << size << " rays, of which " << num_bounded << " bounded and "
       << num_unbounded << " unbounded" << endl;
  if (times_need_sorting)
  {
    cout << "warning, ray times are not in order. This is required, so sorting rays now." << endl;
    struct Temp
    {
      double time;
      size_t index;
    };
    vector<Temp> time_list(times.size());
    for (size_t i = 0; i < time_list.size(); i++)
    {
      time_list[i].time = times[i];
      time_list[i].index = i;
    }
    sort(time_list.begin(), time_list.end(), [](const Temp &a, const Temp &b) { return a.time < b.time; });
    vector<Vector3d> new_starts(starts.size()), new_ends(ends.size());
    vector<double> new_times(times.size());
    vector<RGBA> new_colours(colours.size());
    for (size_t i = 0; i < starts.size(); i++)
    {
      new_starts[i] = starts[time_list[i].index];
      new_ends[i] = ends[time_list[i].index];
      new_times[i] = time_list[i].time;
      new_colours[i] = colours[time_list[i].index];
      if (i > 0 && new_times[i] < new_times[i - 1])
        cout << "sorting failed" << endl;
    }
    starts = new_starts;
    ends = new_ends;
    times = new_times;
    colours = new_colours;
    cout << "finished sorting" << endl;
  }
  return true;
}

void ray::writePlyMesh(const string &file_name, const Mesh &mesh, bool flip_normals)
{
  cout << "saving to " << file_name << ", " << mesh.vertices.size() << " vertices." << endl;

  vector<Vector4f> vertices(mesh.vertices.size());  // 4d to give space for colour
  for (size_t i = 0; i < mesh.vertices.size(); i++)
    vertices[i] << (float)mesh.vertices[i][0], (float)mesh.vertices[i][1], (float)mesh.vertices[i][2], 1.0;


  FILE *fid = fopen(file_name.c_str(), "w+");
  fprintf(fid, "ply\n");
  fprintf(fid, "format binary_little_endian 1.0\n");
  fprintf(fid, "comment SDK generated\n");  // TODO: add version here
  fprintf(fid, "element vertex %u\n", unsigned(vertices.size()));
  fprintf(fid, "property float x\n");
  fprintf(fid, "property float y\n");
  fprintf(fid, "property float z\n");
  fprintf(fid, "property uchar red\n");
  fprintf(fid, "property uchar green\n");
  fprintf(fid, "property uchar blue\n");
  fprintf(fid, "property uchar alpha\n");
  fprintf(fid, "element face %u\n", (unsigned)mesh.index_list.size());
  fprintf(fid, "property list int int vertex_indices\n");
  fprintf(fid, "end_header\n");

  fwrite(&vertices[0], sizeof(Vector4f), vertices.size(), fid);

  vector<Vector4i> triangles(mesh.index_list.size());
  if (flip_normals)
    for (size_t i = 0; i < mesh.index_list.size(); i++)
      triangles[i] = Vector4i(3, mesh.index_list[i][2], mesh.index_list[i][1], mesh.index_list[i][0]);
  else
    for (size_t i = 0; i < mesh.index_list.size(); i++)
      triangles[i] = Vector4i(3, mesh.index_list[i][0], mesh.index_list[i][1], mesh.index_list[i][2]);
  fwrite(&triangles[0], sizeof(Vector4i), triangles.size(), fid);
  fclose(fid);
}


bool ray::readPlyMesh(const string &file, Mesh &mesh)
{
  ifstream input(file.c_str());
  if (!input.is_open())
  {
    cerr << "Couldn't open file: " << file << endl;
    return false;
  }
  string line;
  unsigned row_size = 0;
  unsigned number_of_faces = 0;
  unsigned number_of_vertices = 0;
  char char1[100], char2[100];
  while (line != "end_header\r" && line != "end_header")
  {
    getline(input, line);
    if (line.find("float") != string::npos)
    {
      row_size += 4;
    }
    if (line.find("property uchar") != string::npos)
    {
      row_size++;
    }
    if (line.find("element vertex") != string::npos)
      sscanf(line.c_str(), "%s %s %u", char1, char2, &number_of_vertices);
    if (line.find("element face") != string::npos)
      sscanf(line.c_str(), "%s %s %u", char1, char2, &number_of_faces);
  }

  vector<Vector4f> vertices(number_of_vertices);
  // read data as a block:
  input.read((char *)&vertices[0], sizeof(Vector4f) * vertices.size());
  vector<Vector4i> triangles(number_of_faces);
  input.read((char *)&triangles[0], sizeof(Vector4i) * triangles.size());

  mesh.vertices.resize(vertices.size());
  for (int i = 0; i < (int)vertices.size(); i++)
    mesh.vertices[i] = Vector3d(vertices[i][0], vertices[i][1], vertices[i][2]);

  mesh.index_list.resize(triangles.size());
  for (int i = 0; i < (int)triangles.size(); i++)
    mesh.index_list[i] = Vector3i(triangles[i][1], triangles[i][2], triangles[i][3]);
  cout << "reading from " << file << ", " << mesh.index_list.size() << " triangles." << endl;
  return true;
}
